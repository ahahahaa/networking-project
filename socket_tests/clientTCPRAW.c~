#include<stdio.h>
#include<string.h>
#include<sys/socket.h>
#include<stdlib.h>
#include<netinet/tcp.h>
#include<netinet/ip.h>

struct pseudo_header
{
  u_int32_t source_address;
  u_int32_t dest_address;
  u_int8_t placeholder;
  u_int8_t protocol;
  u_int16_t tcp_length;
}

unsigned short checksum(unsigned short *ptr, int nbytes) {
  register long sum;
  unsigned short oddbyte;
  register short answer;

  sum = 0;
  while(nbytes > 1) {
    sum += *ptr++;
    nbytes-=2;
  }
  if(nbytes == 1) {
    oddbyte = 0;
    *((u_char*) &oddbyte) = *(u_char*)ptr;
    sum += oddbyte;
  }
  sum = (sum >> 16) + (sum & 0xffff);
  sum = sum + (sum >>16);
  answer = (short)~sum;
  return answer;
}

void error(char *msg) {
  perror(msg);
  exit(1);
}

int main (int argc, char *argv) {
  int sockfd;
  int one = 1;
  const int *val = &one;

  if (argv < 3) {
    fprintf(stderr, "usage: %s hostname port\n", argv[0]);
  }
  
  sockfd = socket(AF_INET, SOCK_RAW, IPPROTO_TCP);
  if (sockfd < 0)
    error("ERROR socket");
  if (setsockopt(sockfd, IPPROTO_IP, IP_HDRINCL, val, sizeof(one)) < 0)
    error("ERROR setting socket option");

  char *datagram, *data, *pseudogram;
  datagram = (char *) malloc(4096);
  memset(datagram, 0 ,4096);

  // IP header
  struct iphdr *iph = (struct iphdr *) datagram;

  // TCP header
  struct tcphdr *tcph = (struct tcphdr *) (datagram + sizeof (struct ip));
  struct sockaddr_in serv_addr;
  struct pseudo_header psh;

  // data
  data = datagram + sizeof(struct iphdr) + sizeof(struct tcphdr);
  strcpy(data, "Hello world from TCP packet");

  // address
  serv_addr.sin_family = AF_INET;
  serv_addr.sin_addr.s_addr = inet_addr(argv[1]); // second argument is dest ip
  serv_addr.sin_port = htons(atoi(argv[2]));
  
  // Fill in the IP header
  iphdr->ip_hl = 5;
  iphdr->ip_v = 4;
  iphdr->ip_tos = 0;
  iphdr->ip_len = htons(sizeof(struct ip) + sizeof(struct tcphdr) + strlen(data));
  iphdr->ip_id = htons(54321);
  iphdr->ip_off = 0;
  iphdr->ip_ttl = 255;
  iphdr->ip_p = IPPROTO_TCP;
  iphdr->ip_sum = 0;
  
  struct in_addr ip_src;
  ip_src.s_addr = inet_addr("10.10.10.");
  iphdr->ip_src = ip_src;
  iphdr->ip_dst = serv_addr.sin_addr;

  iphdr->ip_sum = checksum((unsigned short *)datagram, iphdr->ip_len);

  
}
